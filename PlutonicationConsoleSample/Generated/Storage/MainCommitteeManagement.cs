//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> CommitteeManagementStorage
    /// </summary>
    public sealed class CommitteeManagementStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> CommitteeManagementStorage Constructor
        /// </summary>
        public CommitteeManagementStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommitteeManagement", "LenientThreshold"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Generated.Model.sp_arithmetic.per_things.Perquintill)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommitteeManagement", "SessionValidatorBlockCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommitteeManagement", "ValidatorEraTotalReward"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Generated.Model.pallet_committee_management.ValidatorTotalRewards)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommitteeManagement", "ProductionBanConfig"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Generated.Model.primitives.ProductionBanConfig)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommitteeManagement", "UnderperformedValidatorSessionCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommitteeManagement", "Banned"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Generated.Model.primitives.BanInfo)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommitteeManagement", "CurrentAndNextSessionValidatorsStorage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Generated.Model.pallet_committee_management.CurrentAndNextSessionValidators)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommitteeManagement", "UnderperformedFinalizerSessionCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("CommitteeManagement", "FinalityBanConfig"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Generated.Model.primitives.FinalityBanConfig)));
        }
        
        /// <summary>
        /// >> LenientThresholdParams
        /// </summary>
        public static string LenientThresholdParams()
        {
            return RequestGenerator.GetStorage("CommitteeManagement", "LenientThreshold", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LenientThresholdDefault
        /// Default value as hex string
        /// </summary>
        public static string LenientThresholdDefault()
        {
            return "0x0000DA493B717D0C";
        }
        
        /// <summary>
        /// >> LenientThreshold
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.sp_arithmetic.per_things.Perquintill> LenientThreshold(string blockhash, CancellationToken token)
        {
            string parameters = CommitteeManagementStorage.LenientThresholdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.sp_arithmetic.per_things.Perquintill>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SessionValidatorBlockCountParams
        ///  A lookup how many blocks a validator produced.
        /// </summary>
        public static string SessionValidatorBlockCountParams(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("CommitteeManagement", "SessionValidatorBlockCount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SessionValidatorBlockCountDefault
        /// Default value as hex string
        /// </summary>
        public static string SessionValidatorBlockCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> SessionValidatorBlockCount
        ///  A lookup how many blocks a validator produced.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> SessionValidatorBlockCount(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = CommitteeManagementStorage.SessionValidatorBlockCountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ValidatorEraTotalRewardParams
        ///  Total possible reward per validator for the current era.
        /// </summary>
        public static string ValidatorEraTotalRewardParams()
        {
            return RequestGenerator.GetStorage("CommitteeManagement", "ValidatorEraTotalReward", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ValidatorEraTotalRewardDefault
        /// Default value as hex string
        /// </summary>
        public static string ValidatorEraTotalRewardDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ValidatorEraTotalReward
        ///  Total possible reward per validator for the current era.
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.pallet_committee_management.ValidatorTotalRewards> ValidatorEraTotalReward(string blockhash, CancellationToken token)
        {
            string parameters = CommitteeManagementStorage.ValidatorEraTotalRewardParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.pallet_committee_management.ValidatorTotalRewards>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ProductionBanConfigParams
        ///  Current era config for ban functionality related to block production.
        /// </summary>
        public static string ProductionBanConfigParams()
        {
            return RequestGenerator.GetStorage("CommitteeManagement", "ProductionBanConfig", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ProductionBanConfigDefault
        /// Default value as hex string
        /// </summary>
        public static string ProductionBanConfigDefault()
        {
            return "0x0000000003000000C00300000A000000";
        }
        
        /// <summary>
        /// >> ProductionBanConfig
        ///  Current era config for ban functionality related to block production.
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.primitives.ProductionBanConfig> ProductionBanConfig(string blockhash, CancellationToken token)
        {
            string parameters = CommitteeManagementStorage.ProductionBanConfigParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.primitives.ProductionBanConfig>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UnderperformedValidatorSessionCountParams
        ///  A lookup for a number of underperformance sessions in block production for a given validator
        /// </summary>
        public static string UnderperformedValidatorSessionCountParams(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("CommitteeManagement", "UnderperformedValidatorSessionCount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UnderperformedValidatorSessionCountDefault
        /// Default value as hex string
        /// </summary>
        public static string UnderperformedValidatorSessionCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> UnderperformedValidatorSessionCount
        ///  A lookup for a number of underperformance sessions in block production for a given validator
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> UnderperformedValidatorSessionCount(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = CommitteeManagementStorage.UnderperformedValidatorSessionCountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BannedParams
        ///  Validators to be removed from non reserved list in the next era
        /// </summary>
        public static string BannedParams(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("CommitteeManagement", "Banned", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BannedDefault
        /// Default value as hex string
        /// </summary>
        public static string BannedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Banned
        ///  Validators to be removed from non reserved list in the next era
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.primitives.BanInfo> Banned(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = CommitteeManagementStorage.BannedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.primitives.BanInfo>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentAndNextSessionValidatorsStorageParams
        ///  SessionValidators in the current session.
        /// </summary>
        public static string CurrentAndNextSessionValidatorsStorageParams()
        {
            return RequestGenerator.GetStorage("CommitteeManagement", "CurrentAndNextSessionValidatorsStorage", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentAndNextSessionValidatorsStorageDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentAndNextSessionValidatorsStorageDefault()
        {
            return "0x000000000000";
        }
        
        /// <summary>
        /// >> CurrentAndNextSessionValidatorsStorage
        ///  SessionValidators in the current session.
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.pallet_committee_management.CurrentAndNextSessionValidators> CurrentAndNextSessionValidatorsStorage(string blockhash, CancellationToken token)
        {
            string parameters = CommitteeManagementStorage.CurrentAndNextSessionValidatorsStorageParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.pallet_committee_management.CurrentAndNextSessionValidators>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> UnderperformedFinalizerSessionCountParams
        ///  A lookup for a number of underperformance sessions in block finalization for a given validator
        /// </summary>
        public static string UnderperformedFinalizerSessionCountParams(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("CommitteeManagement", "UnderperformedFinalizerSessionCount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> UnderperformedFinalizerSessionCountDefault
        /// Default value as hex string
        /// </summary>
        public static string UnderperformedFinalizerSessionCountDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> UnderperformedFinalizerSessionCount
        ///  A lookup for a number of underperformance sessions in block finalization for a given validator
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> UnderperformedFinalizerSessionCount(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = CommitteeManagementStorage.UnderperformedFinalizerSessionCountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FinalityBanConfigParams
        ///  Current era config for ban functionality related to block finality.
        /// </summary>
        public static string FinalityBanConfigParams()
        {
            return RequestGenerator.GetStorage("CommitteeManagement", "FinalityBanConfig", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> FinalityBanConfigDefault
        /// Default value as hex string
        /// </summary>
        public static string FinalityBanConfigDefault()
        {
            return "0x0B00FFFFFFFF0A000000C0030000";
        }
        
        /// <summary>
        /// >> FinalityBanConfig
        ///  Current era config for ban functionality related to block finality.
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.primitives.FinalityBanConfig> FinalityBanConfig(string blockhash, CancellationToken token)
        {
            string parameters = CommitteeManagementStorage.FinalityBanConfigParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.primitives.FinalityBanConfig>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> CommitteeManagementCalls
    /// </summary>
    public sealed class CommitteeManagementCalls
    {
        
        /// <summary>
        /// >> set_ban_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetBanConfig(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U8> minimal_expected_performance, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> underperformed_session_count_threshold, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> clean_session_counter_delay, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> ban_period)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(minimal_expected_performance.Encode());
            byteArray.AddRange(underperformed_session_count_threshold.Encode());
            byteArray.AddRange(clean_session_counter_delay.Encode());
            byteArray.AddRange(ban_period.Encode());
            return new Method(21, "CommitteeManagement", 1, "set_ban_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> ban_from_committee
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BanFromCommittee(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 banned, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> ban_reason)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(banned.Encode());
            byteArray.AddRange(ban_reason.Encode());
            return new Method(21, "CommitteeManagement", 2, "ban_from_committee", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cancel_ban
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CancelBan(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 banned)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(banned.Encode());
            return new Method(21, "CommitteeManagement", 3, "cancel_ban", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_lenient_threshold
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetLenientThreshold(Substrate.NetApi.Model.Types.Primitive.U8 threshold_percent)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(threshold_percent.Encode());
            return new Method(21, "CommitteeManagement", 4, "set_lenient_threshold", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_finality_ban_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetFinalityBanConfig(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U16> minimal_expected_performance, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> underperformed_session_count_threshold, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> ban_period, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> clean_session_counter_delay)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(minimal_expected_performance.Encode());
            byteArray.AddRange(underperformed_session_count_threshold.Encode());
            byteArray.AddRange(ban_period.Encode());
            byteArray.AddRange(clean_session_counter_delay.Encode());
            return new Method(21, "CommitteeManagement", 5, "set_finality_ban_config", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> CommitteeManagementConstants
    /// </summary>
    public sealed class CommitteeManagementConstants
    {
        
        /// <summary>
        /// >> SessionPeriod
        ///  Nr of blocks in the session.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 SessionPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x84030000");
            return result;
        }
    }
    
    /// <summary>
    /// >> CommitteeManagementErrors
    /// </summary>
    public enum CommitteeManagementErrors
    {
        
        /// <summary>
        /// >> InvalidBanConfig
        /// Raised in any scenario [`ProductionBanConfig`] is invalid
        /// * `performance_ratio_threshold` must be a number in range [0; 100]
        /// * `underperformed_session_count_threshold` must be a positive number,
        /// * `clean_session_counter_delay` must be a positive number.
        /// </summary>
        InvalidBanConfig,
        
        /// <summary>
        /// >> BanReasonTooBig
        /// Ban reason is too big, ie given vector of bytes is greater than
        /// [`primitives::DEFAULT_BAN_REASON_LENGTH`]
        /// </summary>
        BanReasonTooBig,
        
        /// <summary>
        /// >> InvalidLenientThreshold
        /// Lenient threshold not in [0-100] range
        /// </summary>
        InvalidLenientThreshold,
    }
}
