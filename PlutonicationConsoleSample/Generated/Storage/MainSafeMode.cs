//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> SafeModeStorage
    /// </summary>
    public sealed class SafeModeStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SafeModeStorage Constructor
        /// </summary>
        public SafeModeStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SafeMode", "EnteredUntil"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("SafeMode", "Deposits"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> EnteredUntilParams
        ///  Contains the last block number that the safe-mode will remain entered in.
        /// 
        ///   Set to `None` when safe-mode is exited.
        /// 
        ///  Safe-mode is automatically exited when the current block number exceeds this value.
        /// </summary>
        public static string EnteredUntilParams()
        {
            return RequestGenerator.GetStorage("SafeMode", "EnteredUntil", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EnteredUntilDefault
        /// Default value as hex string
        /// </summary>
        public static string EnteredUntilDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> EnteredUntil
        ///  Contains the last block number that the safe-mode will remain entered in.
        /// 
        ///   Set to `None` when safe-mode is exited.
        /// 
        ///  Safe-mode is automatically exited when the current block number exceeds this value.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> EnteredUntil(string blockhash, CancellationToken token)
        {
            string parameters = SafeModeStorage.EnteredUntilParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> DepositsParams
        ///  Holds the reserve that was taken from an account at a specific block number.
        /// 
        ///  This helps governance to have an overview of outstanding deposits that should be returned or
        ///  slashed.
        /// </summary>
        public static string DepositsParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key)
        {
            return RequestGenerator.GetStorage("SafeMode", "Deposits", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> DepositsDefault
        /// Default value as hex string
        /// </summary>
        public static string DepositsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Deposits
        ///  Holds the reserve that was taken from an account at a specific block number.
        /// 
        ///  This helps governance to have an overview of outstanding deposits that should be returned or
        ///  slashed.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Deposits(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApi.Model.Types.Primitive.U32> key, string blockhash, CancellationToken token)
        {
            string parameters = SafeModeStorage.DepositsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SafeModeCalls
    /// </summary>
    public sealed class SafeModeCalls
    {
        
        /// <summary>
        /// >> enter
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Enter()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(23, "SafeMode", 0, "enter", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_enter
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceEnter()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(23, "SafeMode", 1, "force_enter", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> extend
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Extend()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(23, "SafeMode", 2, "extend", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_extend
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceExtend()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(23, "SafeMode", 3, "force_extend", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_exit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceExit()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(23, "SafeMode", 4, "force_exit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_slash_deposit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceSlashDeposit(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 account, Substrate.NetApi.Model.Types.Primitive.U32 block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            byteArray.AddRange(block.Encode());
            return new Method(23, "SafeMode", 5, "force_slash_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> release_deposit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ReleaseDeposit(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 account, Substrate.NetApi.Model.Types.Primitive.U32 block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            byteArray.AddRange(block.Encode());
            return new Method(23, "SafeMode", 6, "release_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_release_deposit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceReleaseDeposit(Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32 account, Substrate.NetApi.Model.Types.Primitive.U32 block)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(account.Encode());
            byteArray.AddRange(block.Encode());
            return new Method(23, "SafeMode", 7, "force_release_deposit", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SafeModeConstants
    /// </summary>
    public sealed class SafeModeConstants
    {
        
        /// <summary>
        /// >> EnterDuration
        ///  For how many blocks the safe-mode will be entered by [`Pallet::enter`].
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 EnterDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
        
        /// <summary>
        /// >> ExtendDuration
        ///  For how many blocks the safe-mode can be extended by each [`Pallet::extend`] call.
        /// 
        ///  This does not impose a hard limit as the safe-mode can be extended multiple times.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ExtendDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00000000");
            return result;
        }
        
        /// <summary>
        /// >> EnterDepositAmount
        ///  The amount that will be reserved upon calling [`Pallet::enter`].
        /// 
        ///  `None` disallows permissionlessly enabling the safe-mode and is a sane default.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> EnterDepositAmount()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
            result.Create("0x00");
            return result;
        }
        
        /// <summary>
        /// >> ExtendDepositAmount
        ///  The amount that will be reserved upon calling [`Pallet::extend`].
        /// 
        ///  `None` disallows permissionlessly extending the safe-mode and is a sane default.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> ExtendDepositAmount()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
            result.Create("0x00");
            return result;
        }
        
        /// <summary>
        /// >> ReleaseDelay
        ///  The minimal duration a deposit will remain reserved after safe-mode is entered or
        ///  extended, unless [`Pallet::force_release_deposit`] is successfully called sooner.
        /// 
        ///  Every deposit is tied to a specific activation or extension, thus each deposit can be
        ///  released independently after the delay for it has passed.
        /// 
        ///  `None` disallows permissionlessly releasing the safe-mode deposits and is a sane
        ///  default.
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32> ReleaseDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U32>();
            result.Create("0x00");
            return result;
        }
    }
    
    /// <summary>
    /// >> SafeModeErrors
    /// </summary>
    public enum SafeModeErrors
    {
        
        /// <summary>
        /// >> Entered
        /// The safe-mode is (already or still) entered.
        /// </summary>
        Entered,
        
        /// <summary>
        /// >> Exited
        /// The safe-mode is (already or still) exited.
        /// </summary>
        Exited,
        
        /// <summary>
        /// >> NotConfigured
        /// This functionality of the pallet is disabled by the configuration.
        /// </summary>
        NotConfigured,
        
        /// <summary>
        /// >> NoDeposit
        /// There is no balance reserved.
        /// </summary>
        NoDeposit,
        
        /// <summary>
        /// >> AlreadyDeposited
        /// The account already has a deposit reserved and can therefore not enter or extend again.
        /// </summary>
        AlreadyDeposited,
        
        /// <summary>
        /// >> CannotReleaseYet
        /// This deposit cannot be released yet.
        /// </summary>
        CannotReleaseYet,
        
        /// <summary>
        /// >> CurrencyError
        /// An error from the underlying `Currency`.
        /// </summary>
        CurrencyError,
    }
}
