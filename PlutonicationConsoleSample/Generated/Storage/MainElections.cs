//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApi.Generated.Storage
{
    
    
    /// <summary>
    /// >> ElectionsStorage
    /// </summary>
    public sealed class ElectionsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ElectionsStorage Constructor
        /// </summary>
        public ElectionsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Elections", "CommitteeSize"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Generated.Model.primitives.CommitteeSeats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Elections", "NextEraCommitteeSize"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Generated.Model.primitives.CommitteeSeats)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Elections", "NextEraReservedValidators"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Elections", "CurrentEraValidators"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Generated.Model.primitives.EraValidators)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Elections", "NextEraNonReservedValidators"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Elections", "Openness"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Generated.Model.primitives.EnumElectionOpenness)));
        }
        
        /// <summary>
        /// >> CommitteeSizeParams
        ///  Desirable size of a committee, see [`CommitteeSeats`].
        /// </summary>
        public static string CommitteeSizeParams()
        {
            return RequestGenerator.GetStorage("Elections", "CommitteeSize", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CommitteeSizeDefault
        /// Default value as hex string
        /// </summary>
        public static string CommitteeSizeDefault()
        {
            return "0x040000000000000000000000";
        }
        
        /// <summary>
        /// >> CommitteeSize
        ///  Desirable size of a committee, see [`CommitteeSeats`].
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.primitives.CommitteeSeats> CommitteeSize(string blockhash, CancellationToken token)
        {
            string parameters = ElectionsStorage.CommitteeSizeParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.primitives.CommitteeSeats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextEraCommitteeSizeParams
        ///  Desired size of a committee in effect from a new era.
        /// </summary>
        public static string NextEraCommitteeSizeParams()
        {
            return RequestGenerator.GetStorage("Elections", "NextEraCommitteeSize", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextEraCommitteeSizeDefault
        /// Default value as hex string
        /// </summary>
        public static string NextEraCommitteeSizeDefault()
        {
            return "0x010000001D0000000D000000";
        }
        
        /// <summary>
        /// >> NextEraCommitteeSize
        ///  Desired size of a committee in effect from a new era.
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.primitives.CommitteeSeats> NextEraCommitteeSize(string blockhash, CancellationToken token)
        {
            string parameters = ElectionsStorage.NextEraCommitteeSizeParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.primitives.CommitteeSeats>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextEraReservedValidatorsParams
        ///  Next era's list of reserved validators.
        /// </summary>
        public static string NextEraReservedValidatorsParams()
        {
            return RequestGenerator.GetStorage("Elections", "NextEraReservedValidators", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextEraReservedValidatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string NextEraReservedValidatorsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NextEraReservedValidators
        ///  Next era's list of reserved validators.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32>> NextEraReservedValidators(string blockhash, CancellationToken token)
        {
            string parameters = ElectionsStorage.NextEraReservedValidatorsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentEraValidatorsParams
        ///  Current era's list of reserved validators.
        /// </summary>
        public static string CurrentEraValidatorsParams()
        {
            return RequestGenerator.GetStorage("Elections", "CurrentEraValidators", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentEraValidatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentEraValidatorsDefault()
        {
            return "0x0000";
        }
        
        /// <summary>
        /// >> CurrentEraValidators
        ///  Current era's list of reserved validators.
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.primitives.EraValidators> CurrentEraValidators(string blockhash, CancellationToken token)
        {
            string parameters = ElectionsStorage.CurrentEraValidatorsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.primitives.EraValidators>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NextEraNonReservedValidatorsParams
        ///  Next era's list of non reserved validators.
        /// </summary>
        public static string NextEraNonReservedValidatorsParams()
        {
            return RequestGenerator.GetStorage("Elections", "NextEraNonReservedValidators", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextEraNonReservedValidatorsDefault
        /// Default value as hex string
        /// </summary>
        public static string NextEraNonReservedValidatorsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> NextEraNonReservedValidators
        ///  Next era's list of non reserved validators.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32>> NextEraNonReservedValidators(string blockhash, CancellationToken token)
        {
            string parameters = ElectionsStorage.NextEraNonReservedValidatorsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OpennessParams
        ///  Openness of the elections, whether we allow all candidates that bonded enough tokens or
        ///  the validators list is managed by sudo
        /// </summary>
        public static string OpennessParams()
        {
            return RequestGenerator.GetStorage("Elections", "Openness", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> OpennessDefault
        /// Default value as hex string
        /// </summary>
        public static string OpennessDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Openness
        ///  Openness of the elections, whether we allow all candidates that bonded enough tokens or
        ///  the validators list is managed by sudo
        /// </summary>
        public async Task<Substrate.NetApi.Generated.Model.primitives.EnumElectionOpenness> Openness(string blockhash, CancellationToken token)
        {
            string parameters = ElectionsStorage.OpennessParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Generated.Model.primitives.EnumElectionOpenness>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ElectionsCalls
    /// </summary>
    public sealed class ElectionsCalls
    {
        
        /// <summary>
        /// >> change_validators
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ChangeValidators(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32>> reserved_validators, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Generated.Model.sp_core.crypto.AccountId32>> non_reserved_validators, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Generated.Model.primitives.CommitteeSeats> committee_size)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(reserved_validators.Encode());
            byteArray.AddRange(non_reserved_validators.Encode());
            byteArray.AddRange(committee_size.Encode());
            return new Method(12, "Elections", 0, "change_validators", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_elections_openness
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetElectionsOpenness(Substrate.NetApi.Generated.Model.primitives.EnumElectionOpenness openness)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(openness.Encode());
            return new Method(12, "Elections", 4, "set_elections_openness", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ElectionsConstants
    /// </summary>
    public sealed class ElectionsConstants
    {
        
        /// <summary>
        /// >> MaxWinners
        ///  The maximum number of winners that can be elected by this `ElectionProvider`
        ///  implementation.
        /// 
        ///  Note: This must always be greater or equal to `T::DataProvider::desired_targets()`.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxWinners()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xFFFFFFFF");
            return result;
        }
    }
    
    /// <summary>
    /// >> ElectionsErrors
    /// </summary>
    public enum ElectionsErrors
    {
        
        /// <summary>
        /// >> NotEnoughValidators
        /// </summary>
        NotEnoughValidators,
        
        /// <summary>
        /// >> NotEnoughReservedValidators
        /// </summary>
        NotEnoughReservedValidators,
        
        /// <summary>
        /// >> NotEnoughNonReservedValidators
        /// </summary>
        NotEnoughNonReservedValidators,
        
        /// <summary>
        /// >> NonUniqueListOfValidators
        /// </summary>
        NonUniqueListOfValidators,
        
        /// <summary>
        /// >> NonReservedFinalitySeatsLargerThanNonReservedSeats
        /// </summary>
        NonReservedFinalitySeatsLargerThanNonReservedSeats,
    }
}
